# -*- coding: utf-8 -*-
"""
Created on Mon Dec 14 08:46:46 2020

@author: polin
"""

import matplotlib.pyplot as plt
import numpy as np
import cv2

flimit = 250
slimit = 255

#изменяем изображение, делаем контур
def changePicture(gray):
    
    new_gray = cv2.GaussianBlur(gray, (3, 3), 0)
    edged = cv2.Canny(new_gray, 100, 50)
    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))
    closed = cv2.morphologyEx(edged, cv2.MORPH_GRADIENT, kernel)
    
    return closed

#получаем готовый шаблон со скрина
def getTemplate(image):
    image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    template = changePicture(image_gray)
    # cv2.imshow('image_gray', image_gray)
    return template

#изменяем изображение с камеры
def changeCamera(gray):
    
    new_gray = cv2.GaussianBlur(gray, (1, 1), 0)
    edged = cv2.Canny(new_gray, 100, 50)
    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
    closed = cv2.morphologyEx(edged, cv2.MORPH_GRADIENT, kernel)
    
    return closed

#преобразуем в серый, получаем изображение с камеры
def getCamera(image):
    image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    template = changeCamera(image_gray)
    # cv2.imshow('image_gray', image_gray)
    return template
    

def drawContourTemplate(template, screen):
    conts, hier = cv2.findContours(template, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    

#ищем нужный контур рисунка в шаблоне           
    for c in conts:
        peri = cv2.arcLength(c, True)
        # print("peri", peri)

        if peri > 1100 and peri < 1300:       
            return c
        # cv2.drawContours(screen, conts, -1, (0, 0,255), 3)    
     
# def changeAlph(gray):
  
#     new_gray = cv2.GaussianBlur(gray, (3, 3), 0)
#     edged = cv2.Canny(new_gray, 100, 50)
#     kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))
#     closed = cv2.morphologyEx(edged, cv2.MORPH_CLOSE, kernel)    
#     return closed
     
def fupdate(value):
    global flimit
    flimit = value
    
def subdate(value):
    global slimit 
    slimit = value

cam = cv2.VideoCapture(0)

cv2.namedWindow('Camera', cv2.WINDOW_KEEPRATIO)
cv2.namedWindow('Mask', cv2.WINDOW_KEEPRATIO)
cv2.namedWindow('Shrek', cv2.WINDOW_KEEPRATIO)

cv2.createTrackbar("F", "Mask", flimit, 255, fupdate)
cv2.createTrackbar("S", "Mask", flimit, 255, fupdate)

kernel = np.ones((15, 15))

screen = cv2.imread("new.png")
template = getTemplate(screen)
contur = drawContourTemplate(template, screen) 


low_res = 2



while cam.isOpened():
    ret, frame = cam.read()
    mask = getCamera(frame)
    conts1, hier = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    cv2.drawContours(frame, conts1, -1, (0, 255,0), 3)   
    
    for c in conts1:
        frame_with_im = frame
        
        res = cv2.matchShapes(contur,c,cv2.CONTOURS_MATCH_I1,1)
        peri = cv2.arcLength(c, True)
        
        if res<low_res and peri > 700:
            print("Find my image")
            print(res)
            # drawRectAbove(c, frame_with_im)  
           
            rect = cv2.minAreaRect(c)
            box = cv2.boxPoints(rect)
            box_x = []
            box_y = []
            for p in box:
                cv2.circle(frame_with_im, tuple(p), 6, (0, 0, 255), 2)
                # box_x.append(int(p[0]))
                # box_y.append(int(p[1]))
                
            # width_circle = int(max(box_x)- min(box_x)/2)
            # height_circle = int(max(box_y)-min(box_y)/2)
            # cv2.circle(frame_with_im, ( max(box_x)- width_circle,max(box_y)-height_circle), width_circle, (0, 0, 255), 2)
                
            
    # if len(countours)>0:
    #     shrek = max(countours, key=cv2.contourArea)
    #     rect = cv2.minAreaRect(shrek)
    #     box = cv2.boxPoints(rect)
    #     box_x = []
    #     box_y = []
    #     for p in box:
    #         cv2.circle(frame, tuple(p), 6, (0, 0, 255), 2)
    #         box_x.append(int(p[0]))
    #         box_y.append(int(p[1]))
    #         if box_x:
    #             shrek_image = frame[min(box_y):max(box_y), min(box_x):max(box_x)]

    #             if shrek_image.size > 0:
    #                  print(shrek)
    #                  drawRectAbove(shrek, frame)
    #                  cv2.imshow("Shrek", shrek_image)
    
    cv2.imshow('Camera', frame)
    cv2.imshow('Mask', mask)
    cv2.imshow('Image', frame_with_im)
    
    key = cv2.waitKey(1)
        
    if key == ord('q'):
        break
    
cam.release()
cv2.destroyAllWindows()
